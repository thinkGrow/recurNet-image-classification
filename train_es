"""Train Super Resolution model."""

import argparse
import os
import sys
import time
from pathlib import Path

import torch
import torch.nn as nn
import torch.optim as optim
import tqdm
import torchvision
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter
from torchvision import transforms
from torchmetrics.classification import MulticlassF1Score

from models.recur_cnn import RecurCNN
# from utils.div2k_dataset import DIV2KDataset
from utils.perceptual_loss import VGG16PerceptualLoss
# from test import function

import io
import copy

class EarlyStopping():
  def __init__(self, patience=5, min_delta=0, restore_best_weights=True):
    self.patience = patience
    self.min_delta = min_delta
    self.restore_best_weights = restore_best_weights
    self.best_model = None
    self.best_loss = None
    self.counter = 0
    self.status = ""
    
  def __call__(self, model, val_loss):
    if self.best_loss == None:
      self.best_loss = val_loss
      self.best_model = copy.deepcopy(model)
    elif self.best_loss - val_loss > self.min_delta:
      self.best_loss = val_loss
      self.counter = 0
      self.best_model.load_state_dict(model.state_dict())
    elif self.best_loss - val_loss < self.min_delta:
      self.counter += 1
      if self.counter >= self.patience:
        self.status = f"Stopped on {self.counter}"
        if self.restore_best_weights:
          model.load_state_dict(self.best_model.state_dict())
        return True
    self.status = f"{self.counter}/{self.patience}"
    return False
  

def train(
    # PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0
    
    # data_dir: str,
    # patch_size: int = 48,
    dataset: str = "CIFAR10",
    batch_size: int = 8,
    num_epochs: int = 5,
    lr: float = 1e-4,
    num_workers: int = 3,
    device: str = "cpu",
    save_dir: str = "weights",
    save_interval: int = 10,

) -> None:
    """
    Train function.

    :param data_dir: str, data directory.
    :type data_dir: str
    :param scale_factor: int, scale factor.
    :type scale_factor: int
    :param patch_size: int, patch size.
    :type patch_size: int
    :param batch_size: int, batch size.
    :type batch_size: int
    :param num_epochs: int, number of epochs.
    :type num_epochs: int
    :param lr: float, learning rate.
    :type lr: float
    :param num_workers: int, number of workers.
    :type num_workers: int
    :param device: str, device.
    :type device: str
    :param save_dir: str, save directory.
    :type save_dir: str
    :param save_interval: int, save interval.
    :type save_interval: int
    """

    # set_per_process_memory_fraction = 0.0
    
    # Create save directory.
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    # Create dataset
    if dataset == "CIFAR10":
        # Define the transform to normalize the data
        transform = transforms.Compose(
            [transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

        # Load the CIFAR-10 dataset
        testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
        trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
        
        # Create a data loader for the test set
        batch_size = 16
        testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)
        trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=False, num_workers=2)
        

        # Separate the features (x_test) and labels (y_test) in batches
        x_test_batches = []
        y_test_batches = []
        for images, labels in testloader:
            x_test_batches.append(images)
            y_test_batches.append(labels)

        # Concatenate the batches to obtain the complete x_test and y_test
        x_test = torch.cat(x_test_batches, dim=0)
        y_test = torch.cat(y_test_batches, dim=0)


        # Separate the features (x_test) and labels (y_test) in batches
        x_train_batches = []
        y_train_batches = []
        for images, labels in trainloader:
            x_train_batches.append(images)
            y_train_batches.append(labels)

        # Concatenate the batches to obtain the complete x_test and y_test
        x_train = torch.cat(x_train_batches, dim=0)
        y_train = torch.cat(y_train_batches, dim=0)

        # Numpy to Torch Tensor
        x_train = x_train.to(device)
        y_train = y_train.to(device)

        x_test =x_test.to(device)
        y_test = y_test.to(device)

    # Create model.
    model = RecurCNN(
        width=32
    ).to(device)

    # Create criterion.
    criterion_mse = nn.MSELoss()
    criterion_cel = nn.CrossEntropyLoss(
        # device=device
    )
    # criterion_percp = VGG16PerceptualLoss(
    #     device=device
    # )

    # Create optimizer.
    optimizer = optim.Adam(
        params=model.parameters(),
        lr=lr
    )

    # Create model.
    model = RecurCNN(
        width=32
    ).to(device)

    # Create criterion.
    criterion_mse = nn.MSELoss()
    c_loss = nn.CrossEntropyLoss(
        # device=device
    )


    es = EarlyStopping()

    epoch = 0
    done = False
    while epoch<1000 and not done:
        epoch += 1
        steps = list(enumerate(trainloader))
        pbar = tqdm.tqdm(steps)
        model.train()
        for i, (x_batch, y_batch) in pbar:
            y_batch_pred = model(x_batch.to(device))
            loss = c_loss(y_batch_pred, y_batch.to(device))
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            loss, current = loss.item(), (i + 1)* len(x_batch)
            if i == len(steps)-1:
                model.eval()
                pred = model(x_test)
                vloss = c_loss(pred, y_test)
                if es(model,vloss): done = True
                pbar.set_description(f"Epoch: {epoch}, tloss: {loss}, vloss: {vloss:>7f}, EStop:[{es.status}]")
            else:
                pbar.set_description(f"Epoch: {epoch}, tloss {loss:}")

        #     # Save model at save interval.
        # if (epoch + 1) % save_interval == 0:
        #     torch.save({
        #         "epoch": epoch + 1,
        #         "model_state_dict": model.state_dict(),
        #         "optimizer_state_dict": optimizer.state_dict(),
        #         "loss": running_loss
        #         # "accuracy": 
        #     },
        #         os.path.join(save_dir, f"model_latest.pth")
        #     )

        # # Save best model.
        # if running_loss < best_loss:
        #     best_loss = running_loss
        #     torch.save({
        #         "epoch": epoch + 1,
        #         "model_state_dict": model.state_dict(),
        #         "optimizer_state_dict": optimizer.state_dict(),
        #         "loss": running_loss
        #     },
        #         os.path.join(save_dir, f"model_best.pth")
        #     )

        # Save the model
        torch.save(model.state_dict(), 'model_es.pth')

    # run version
    run_version = 0
    while os.path.exists(os.path.join(save_dir, f"run_es_{run_version}")):
        run_version += 1

    # Create save directory.
    save_dir = os.path.join(save_dir, f"run_es_{run_version}")

    # Create save directory if not exists.
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    # setup tensorboard
    writer = SummaryWriter(log_dir=save_dir)

    
    

        


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Train RecurNet model.")
    # parser.add_argument("--PYTORCH_MPS_HIGH_WATERMARK_RATIO", type=float,
    #                     default="0.1", help="mps ratio"),
    parser.add_argument("--dataset", type=str, default="CIFAR10", help="dataset"),
    # parser.add_argument("--patch_size", type=int,
    #                     default=48, help="patch size.")
    parser.add_argument("--batch_size", type=int,
                        default=16, help="batch size.")
    parser.add_argument("--num_epochs", type=int,
                        default=100, help="number of epochs.")
    parser.add_argument("--lr", type=float, default=1e-4,
                        help="learning rate.")
    parser.add_argument("--device", type=str, default="cpu", help="device.")
    parser.add_argument("--num_workers", type=int,
                        default=4, help="number of workers.")
    # parser.add_argument("--device", type=str, default="cpu", help="device.")
    parser.add_argument("--save_dir", type=str,
                        default="weights", help="save directory.")
    parser.add_argument("--save_interval", type=int,
                        default=10, help="save interval.")
    args = parser.parse_args()

    train(
        # PYTORCH_MPS_HIGH_WATERMARK_RATIO = args.PYTORCH_MPS_HIGH_WATERMARK_RATIO,
        dataset=args.dataset,
        # patch_size=args.patch_size,
        batch_size=args.batch_size,
        num_epochs=args.num_epochs,
        lr=args.lr,
        num_workers=args.num_workers,
        device=args.device,
        save_dir=args.save_dir,
        save_interval=args.save_interval
    )
